generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id             Int          @id @default(autoincrement())
  address_type   String
  house_no       Int
  street_address String
  area           String
  landmark       String
  city           String
  state          String
  lat            String
  lon            String
  user_id        Int
  created_at     DateTime
  User           User         @relation(fields: [user_id], references: [id])
  Restaurent     Restaurent[]
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String
  phone_number String
  role_id      Int
  created_at   DateTime       @default(now())
  Role         Role           @relation(fields: [role_id], references: [id])
  orders       Order[]
  reviews      Review[]
  Address      Address[]
  Notification Notification[]
}

model Menu {
  id            Int            @id @default(autoincrement())
  name          String
  type          String
  description   String
  image         String
  price         Int
  gstPercentage String
  category_id   Int
  Restaurent_id Int
  isAvailable   Boolean
  category      menuCategory   @relation(fields: [category_id], references: [id])
  restaurent    Restaurent?    @relation(fields: [Restaurent_id], references: [id])
  orders        Order[]
  Notification  Notification[]
  reviews       Review[]
  cart_menu     cart_menu[]
}

model Notification {
  id          Int    @id @default(autoincrement())
  messageHead String
  description String
  order_id    Int
  user_id     Int
  order       Order  @relation(fields: [order_id], references: [id])
  user        User   @relation(fields: [user_id], references: [id])
  Menu        Menu?  @relation(fields: [menu_id], references: [id])
  menu_id     Int?
}

model Order {
  id           Int            @id @default(autoincrement())
  user_id      Int
  cart_menu_id Int
  orderStatus  String
  Bill         Json?
  rider_id     String
  rider_name   String
  user         User           @relation(fields: [user_id], references: [id])
  cart_menu    cart_menu      @relation(fields: [cart_menu_id], references: [id])
  reviews      Review[]
  Menu         Menu?          @relation(fields: [menu_id], references: [id])
  menu_id      Int?
  Notification Notification[]
}

model menuCategory {
  id                 Int     @id @default(autoincrement())
  menu_category_name String
  isAvailable        Boolean
  menus              Menu[]
}

model Restaurent {
  id          Int     @id @default(autoincrement())
  name        String
  address_id  Int
  description String
  address     Address @relation(fields: [address_id], references: [id])
  menus       Menu[]
}

model Review {
  id                 Int    @id @default(autoincrement())
  ReviewType         String
  reviewTitle        String
  review_description String
  stars              Int
  user_id            Int
  order_id           Int
  menu_id            Int
  user               User   @relation(fields: [user_id], references: [id])
  order              Order  @relation(fields: [order_id], references: [id])
  menu               Menu   @relation(fields: [menu_id], references: [id])
}

model cart_menu {
  id      Int     @id @default(autoincrement())
  menu_id Int
  count   Float
  menu    Menu    @relation(fields: [menu_id], references: [id])
  Order   Order[]
}

model Role {
  id            Int    @id @default(autoincrement())
  role_name     String
  rolePrivilege Json?
  users         User[]
}
