generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  empId          Int              @default(autoincrement())
  name           String
  phone_number   String
  status         userStatusType   @default(pending)
  adminUserStatus Boolean         @default(true)
  teamId         Int?
  email          String  @unique
  password       String?
  roleId         Int           
  Egg_Collection Egg_Collection[]
  role           Role             @relation(fields: [roleId], references: [id])
  team           Team?            @relation(fields: [teamId], references: [id])
}

model Role {
  id            Int     @id @default(autoincrement())
  role_name     String
  rolePrivilege String?
  User          User[]
}

model Team {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Egg_Collection {
  id                 Int               @id @default(autoincrement())
  latitude           String?
  longitude          String?
  nest_width         Float?
  nest_depth         Float
  no_of_eggs         Int?
  distance_of_sea    Float
  temperature        Float?
  approx_next_timeId Int?
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime          @updatedAt @db.Timestamptz(6)
  userId             Int
  status             eggCollection     @default(pending)
  hatchery_date      DateTime?
  locationId         Int
  wastage_egg        Int?
  hatchery_id        Int?
  height             Float?
  incharge_name      String?
  nest_there         Int?
  pit_number         Int?
  approx_next_time   Approx_Next_Time? @relation(fields: [approx_next_timeId], references: [id])
  hatchery           Hatchery?         @relation(fields: [hatchery_id], references: [id])
  location_name      Location          @relation(fields: [locationId], references: [id])
  user               User              @relation(fields: [userId], references: [id])
  Egg_Image          Egg_Image[]
}

model Hatchery {
  id             Int              @id @default(autoincrement())
  hatchery_name  String
  Egg_Collection Egg_Collection[]
}

model Egg_Image {
  id              Int            @id @default(autoincrement())
  eggCollectionId Int
  imageUrl        String
  eggCollection   Egg_Collection @relation(fields: [eggCollectionId], references: [id])
}

model Approx_Next_Time {
  id             Int              @id @default(autoincrement())
  option         String
  value          String
  Egg_Collection Egg_Collection[]
}

model OTP {
  id           Int     @id @default(autoincrement())
  phone_number Int
  otp          Int
  active       Boolean
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  user        Int
  type        TokenType
  expires     DateTime  @db.Timestamptz(3)
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt   DateTime? @db.Timestamptz(3)
}

model Location {
  id             Int              @id @default(autoincrement())
  locationName   String
  Egg_Collection Egg_Collection[]
}

enum TokenType {
  refresh
  resetPassword
  verifyEmail
}

enum userStatusType {
  pending
  completed
}

enum eggCollection {
  pending
  completed
}
